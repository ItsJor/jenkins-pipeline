@Library('JENKINS_SHARED_LIBRARY@main') _

pipeline {

    agent any

    parameters {
        string(name: 'GIT_REPO_URL', defaultValue: 'https://github.com/ItsJor/sw_r_assist.git', description: 'Repository link for build - java')
        string(name: 'GIT_BUILD_BRANCH', defaultValue: 'main', description: 'Branch for the build')
        choice(name: 'BUILD_ENVIRONMENT', choices: ['dev', 'uat', 'prod'], description: 'Environment to build out')
    }

    environment {
        SPRING_PROFILE_ACTIVE = "$params.BUILD_ENVIRONMENT"
        DB_USERNAME = credentials('DB_USERNAME')
        DB_PASSWORD = credentials('DB_PASSWORD')
        DB_DATASOURCE = credentials('DB_DATASOURCE')
        API_INSTANCE_LOCATION = credentials('API_INSTANCE_LOCATION')
    }

    stages {
        stage('Shared library resource') {
            steps {
                script {
                    writeFile(file: 'deploy_test.sh', text: libraryResource('update_and_run.sh'))
                }
            }
        }
        stage('Clone repository') {
            steps {
                echo 'Cloning repository from: ' + params.GIT_REPO_URL
                echo 'Cloning on branch: ' + params.GIT_BUILD_BRANCH
                git(url: params.GIT_REPO_URL, branch: params.GIT_BUILD_BRANCH, credentialsId: 'github_pat')
            }
        }
        stage('Build project') {
            steps {
                sh './mvnw clean install -DskipTests=true'
            }
        }
        stage('Push artifact to api instance') {
            steps {
                withCredentials([file(credentialsId: 'API_PEM', variable: 'PEM_FILE')]) {                 
                    sh 'scp -o StrictHostKeyChecking=no -i ${PEM_FILE} ${WORKSPACE}/target/sampleApi-0.0.1-SNAPSHOT.jar ec2-user@${API_INSTANCE_LOCATION}'
                }
            }
        }
        stage('Push script to api instance') {
            steps {
                withCredentials([file(credentialsId: 'API_PEM', variable: 'PEM_FILE')]) {                 
                    sh 'scp -o StrictHostKeyChecking=no -i ${PEM_FILE} ${WORKSPACE}/deploy_test.sh ec2-user@${API_INSTANCE_LOCATION}'
                }
            }
        }
        stage('Pause for debug') {
            steps {
                input("pause")
            }
        }
        stage('Update and run on instance') {
            steps {
                withCredentials([file(credentialsId: 'API_PEM', variable: 'PEM_FILE')]) {
                    sh 'ls -l $PEM_FILE'
                    sh 'ssh -i "$PEM_FILE" ec2-user@ec2-44-213-213-142.compute-1.amazonaws.com "cd /home/ec2-user && sudo yum update -y"'
                }
            }
        }
        
    }

    post {
        always {
            echo 'Cleaning workspace'
            cleanWs()
        }
    }

}